name: Upload and Deploy to OD2
on: [push]

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:

      #
      # Step 1
      #
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Step 2
      #
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8

      #
      # Step 3
      # Get the Caches
      #
      - name: Get cache key helper values
        uses: actions/github-script@v4.0.2
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Maven packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-
            ${{ runner.os }}-maven-nhs-digital-
            ${{ runner.os }}-maven-nhs-

      # todo set node.js cache when adding main project
      # todo version bump (main project)
      #
      # Step 6
      #
      - name: Package Code
        run: |
          mvn verify --global-settings ".mvn.settings.xml"
          mvn -P dist
        env:
          HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
          HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

      # todo upload build for next job
      #
      # Step 6
      # Store homepage distribution workflow artifacts
      #
      - name: Archive dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: target/*.tar.gz


  upload:
    name: Upload Build to BR Cloud
    needs:
      - build
    runs-on: ubuntu-latest
    steps:

      # Set up steps.

      # Get API access token and verify it.
      - name: Obtaino JWT Token
        id: jwt_token
        run: |
          response=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -X POST https://api.nhsdigital.bloomreach.cloud/v3/authn/access_token \
          -d '{ "username": "${{ env.USERNAME }}", "password": "${{ env.PASSWORD }}" }')
          token=$(echo $response | awk 'match($0, /access_token":"[^"]+"/) {print substr($0, RSTART+15)}' | cut -d '"' -f 1 )
          refresh=$(echo $response | awk 'match($0, /refresh_token":"[^"]+"/) {print substr($0, RSTART+16)}' | cut -d '"' -f 1 )
          echo "::set-output name=token::$token"
          echo "::set-output name=refresh::$refresh"
        env:
          API: ${{ secrets.MISSION_CONTROL_API_ADDRESS }}
          USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
      - name: Verify JWT Token
        id: jwt_token_verify
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.nhsdigital.bloomreach.cloud/v3/authn/verify_token \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"
      - name: Check Response Code from Verify JWT Token
        if: ${{ steps.jwt_token_verify.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT token failed verification!')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.jwt_token_verify.outputs.code }}


      # Main steps
      # todo: main steps upload build via API
      - name: Download version artifact
        uses: actions/download-artifact@v2
        id: down


      # working-directory: ${{steps.download.outputs.download-path}}
      - name: Upload Build to BR Cloud
        run: |
          ls
          cd build
          ls
          filelist=($(build/ls))
          curl -i \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X POST https://api.nhsdigital.bloomreach.cloud/v3/distributions \
          -F 'dist_file=@${filelist[0]}'
        working-directory: ${{steps.download.outputs.download-path}}


      # Clean-up steps below.

      # Delete JWT refresh token
      - name: Request Deletion of JWT Refresh Access tokens
        id: jwt_token_invalidate
        run: |
          code=$(curl -L \
          -H "Accept: application/json; charset=utf-8" \
          -X DELETE https://api.nhsdigital.bloomreach.cloud/v3/authn/refresh_token \
          -d '{ "grant_type": "refresh_token", "refresh_token": "${{ env.REFRESH }}" }' \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "::set-output name=code::$code"
        env:
          REFRESH:  ${{ steps.jwt_token.outputs.refresh }}
      - name: Check Response Code from Deletion of JWT Refresh Access tokens
        if: ${{ steps.jwt_token_invalidate.outputs.code != 200 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The JWT Deletion of JWT Refresh Access tokens failed!')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.jwt_token_invalidate.outputs.code }}